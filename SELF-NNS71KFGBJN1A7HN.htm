<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Webhook Multitool</title>
    <link href="https://fonts.cdnfonts.com/css/vcr-osd-mono" rel="stylesheet">
    <style>
        * {
            font-family: "VCR OSD Mono", sans-serif;
            color: white;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            height: 100%;
        }

        .wallpaper {
            background-image: linear-gradient(rgba(0, 0, 0, 0.85), rgba(0, 0, 0, 0.9)),
                url(https://files.catbox.moe/ztoa4s.gif);
            background-size: cover;
            background-position: center;
            min-height: 100vh;
        }

        pre {
            color: #fff;
            overflow-x: hidden;
            overflow-y: hidden;
            border: none;
            font-size: 10px;
            text-align: center;
            margin: 20px 0;
        }

        .center-screen {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding-bottom: 50px;
        }

        .pin-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.95);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        }

        .pin-container {
            width: 400px;
            max-width: 90%;
            background: rgba(0, 0, 0, 0.7);
            border: 2px solid #2c2c2c;
            border-radius: 5px;
            padding: 20px;
            text-align: center;
        }

        .pin-container input {
            width: 100%;
            padding: 10px;
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #2c2c2c;
            border-radius: 3px;
            color: white;
            font-family: "VCR OSD Mono", sans-serif;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .pin-container input:focus {
            outline: none;
            border-color: #666666;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
            animation: inputGlow 1s ease-in-out;
        }

        @keyframes inputGlow {
            0% { box-shadow: 0 0 5px rgba(255, 255, 255, 0.1); }
            50% { box-shadow: 0 0 20px rgba(255, 255, 255, 0.4); }
            100% { box-shadow: 0 0 10px rgba(255, 255, 255, 0.2); }
        }

        .pin-error {
            color: #ff0000;
            font-size: 12px;
            margin-top: 10px;
            animation: shake 0.5s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .form-container {
            width: 500px;
            max-width: 90%;
            background: transparent;
            border: 2px solid #2c2c2c;
            border-radius: 5px;
            padding: 30px;
            text-align: center;
        }

        .form-group {
            margin-bottom: 20px;
            position: relative;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-size: 12px;
            color: #dddddd;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #2c2c2c;
            border-radius: 3px;
            color: white;
            font-family: "VCR OSD Mono", sans-serif;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #666666;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
            animation: inputGlow 1s ease-in-out;
        }

        .form-group textarea {
            height: 100px;
            resize: vertical;
        }

        .error {
            animation: shake 0.5s ease-in-out;
            border-color: #ff0000;
        }

        .boton-elegante {
            display: inline-block;
            text-decoration: none;
            padding: 8px 20px;
            border: 2px solid #2c2c2c;
            background-color: #1a1a1a;
            color: #ffffff;
            font-size: 1.0rem;
            cursor: pointer;
            border-radius: 30px;
            transition: all 0.4s ease;
            outline: none;
            position: relative;
            overflow: hidden;
            font-weight: bold;
            opacity: 50%;
            margin: 10px;
        }

        .boton-elegante::after {
            content: "";
            position: absolute;
            top: 0;
            opacity: 50%;
            left: 0;
            width: 150%;
            height: 100%;
            background: radial-gradient(
                circle,
                rgba(255, 255, 255, 0.25) 0%,
                rgba(255, 255, 255, 0) 70%
            );
            transform: scale(0);
            transition: transform 0.5s ease;
        }

        .boton-elegante:hover::after {
            transform: scale(4);
        }

        .boton-elegante:hover {
            border-color: #666666;
            background: #292929;
            opacity: 100%;
        }

        .boton-elegante:disabled {
            opacity: 30%;
            cursor: not-allowed;
        }

        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            max-width: 300px;
        }

        .notification {
            background: rgba(0, 0, 0, 0.8);
            border: 1px solid #2c2c2c;
            border-radius: 3px;
            padding: 12px;
            margin-bottom: 10px;
            font-size: 12px;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
            font-family: "VCR OSD Mono", sans-serif;
        }

        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }

        .notification.success {
            border-color: #00ff00;
            color: #00ff00;
        }

        .notification.error {
            border-color: #ff0000;
            color: #ff0000;
            animation: shake 0.5s ease-in-out;
        }

        .notification h4 {
            margin: 0 0 5px 0;
            font-size: 14px;
        }

        .text {
            margin-top: 30px;
            text-decoration: none;
            color: #dddddd;
            text-align: center;
            font-size: 12px;
        }

        @media (max-width: 600px) {
            html, body {
                overflow-x: hidden;
            }

            .form-container,
            .pin-container {
                width: 100%;
                padding: 20px;
            }

            .notification-container {
                top: 10px;
                right: 10px;
                left: 10px;
                max-width: none;
            }

            pre {
                font-size: 8px;
            }

            .text {
                font-size: 10px;
                padding: 0 20px;
            }
        }
    </style>
</head>
<body class="wallpaper">
    <div class="pin-overlay" id="pinOverlay">
        <div class="pin-container">
            <h2>Enter PIN</h2>
            <input type="password" id="pinInput" placeholder="Enter PIN from pin.txt">
            <button class="boton-elegante" id="pinSubmit">Submit</button>
            <div id="pinError" class="pin-error" style="display: none;"></div>
        </div>
    </div>

    <div class="center-screen" id="dashboard" style="display: none;">
        <pre>
                  _  __    _                 _             
                 | |/ _|  | |               (_)            
         ___  ___| | |_ __| | _____  ____  ___ _ __   __ _ 
        / __|/ _ \ |  _/ _` |/ _ \ \/ /\ \/ / | '_ \ / _` |
--      \__ \  __/ | || (_| | (_) >  <  >  <| | | | | (_| |      --
        |___/\___|_|_| \__,_|\___/_/\_\/_/\_\_|_| |_|\__, |
                                                      __/ |
                                                     |___/ 
        </pre>
        <div class="form-container">
            <h2>Webhook Multitool</h2>
            <form id="webhookForm">
                <div class="form-group">
                    <label for="webhookUrl">Webhook URL</label>
                    <input type="url" id="webhookUrl" placeholder="https://discord.com/api/webhooks/..." required>
                </div>
                <div class="form-group">
                    <label for="message">Message/Command</label>
                    <textarea id="message" placeholder="Enter message or bot command" required></textarea>
                </div>
                <div class="form-group">
                    <label for="repeatCount">Messages Repeat? (Spammer)</label>
                    <input type="number" id="repeatCount" min="1" max="10" value="1">
                </div>
                <div class="form-group">
                    <button type="button" class="boton-elegante" id="spamBtn">Spam Webhook</button>
                    <button type="button" class="boton-elegante" id="deleteBtn">Delete Webhook</button>
                    <button type="button" class="boton-elegante" id="testBtn">Test Webhook</button>
                </div>
            </form>
            <div class="text">
                <strong>Warning:</strong> This is a client-side tool. Webhook URLs are processed in the browser and may be exposed. Use temporary webhooks and deploy securely. Ensure pin.txt is in the public directory.
            </div>
        </div>
    </div>

    <div class="notification-container" id="notificationContainer"></div>

    <script>
        // Notification System
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `<h4>${type.toUpperCase()}</h4><p>${message}</p>`;
            document.getElementById('notificationContainer').appendChild(notification);
            setTimeout(() => notification.classList.add('show'), 10);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 4000);
        }

        // PIN Authentication
        const pinOverlay = document.getElementById('pinOverlay');
        const pinInput = document.getElementById('pinInput');
        const pinSubmit = document.getElementById('pinSubmit');
        const pinError = document.getElementById('pinError');
        const dashboard = document.getElementById('dashboard');

        pinSubmit.addEventListener('click', async () => {
            try {
                const response = await fetch('/pin.txt');
                if (!response.ok) {
                    throw new Error(`Failed to load pin.txt: ${response.status} ${response.statusText}`);
                }
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('text/plain')) {
                    throw new Error('pin.txt is not a plain text file');
                }
                const correctPin = await response.text();
                const trimmedPin = typeof correctPin === 'string' ? correctPin.trim() : '';
                console.log('Fetched PIN:', trimmedPin); // Debug log
                if (pinInput.value.trim() === trimmedPin) {
                    pinOverlay.style.display = 'none';
                    dashboard.style.display = 'block';
                } else {
                    pinError.textContent = 'Invalid PIN. Try again.';
                    pinError.style.display = 'block';
                    pinInput.classList.add('error');
                    setTimeout(() => pinInput.classList.remove('error'), 500);
                }
            } catch (error) {
                console.error('PIN fetch error:', error);
                pinError.textContent = `Error: ${error.message}. Check pin.txt deployment.`;
                pinError.style.display = 'block';
            }
        });

        // Webhook Multitool Logic
        const webhookForm = document.getElementById('webhookForm');
        const webhookUrl = document.getElementById('webhookUrl');
        const message = document.getElementById('@everyone selfdox.cc message selfdox.cc');
        const repeatCount = document.getElementById('repeatCount');
        const spamBtn = document.getElementById('spamBtn');
        const deleteBtn = document.getElementById('deleteBtn');
        const testBtn = document.getElementById('testBtn');

        function validateInputs() {
            let isValid = true;
            [webhookUrl, message].forEach(input => {
                if (!input.value.trim()) {
                    input.classList.add('error');
                    isValid = false;
                    setTimeout(() => input.classList.remove('error'), 500);
                }
            });
            return isValid;
        }

        spamBtn.addEventListener('click', async () => {
            if (!validateInputs()) {
                showNotification('Webhook URL and message are required.', 'error');
                return;
            }
            spamBtn.disabled = true;
            showNotification('Spamming webhook...', 'info');
            const url = btoa(webhookUrl.value); // Obfuscate webhook URL
            const count = parseInt(repeatCount.value);
            try {
                for (let i = 0; i < count; i++) {
                    const response = await fetch(atob(url), {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ content: message.value })
                    });
                    if (!response.ok) throw new Error('Failed to send message');
                    await new Promise(resolve => setTimeout(resolve, 1000)); // Rate limit
                }
                showNotification(`Sent ${count} message(s) successfully.`, 'success');
            } catch (error) {
                showNotification('Failed to spam webhook. Check URL.', 'error');
                console.error(error);
            } finally {
                spamBtn.disabled = false;
            }
        });

        deleteBtn.addEventListener('click', async () => {
            if (!webhookUrl.value.trim()) {
                webhookUrl.classList.add('error');
                setTimeout(() => webhookUrl.classList.remove('error'), 500);
                showNotification('Webhook URL is required.', 'error');
                return;
            }
            deleteBtn.disabled = true;
            showNotification('Deleting webhook...', 'info');
            const url = btoa(webhookUrl.value);
            try {
                const response = await fetch(atob(url), { method: 'DELETE' });
                if (response.ok) {
                    showNotification('Webhook deleted successfully.', 'success');
                    webhookForm.reset();
                } else {
                    throw new Error('Failed to delete webhook');
                }
            } catch (error) {
                showNotification('Failed to delete webhook. Check URL.', 'error');
                console.error(error);
            } finally {
                deleteBtn.disabled = false;
            }
        });

        testBtn.addEventListener('click', async () => {
            if (!webhookUrl.value.trim()) {
                webhookUrl.classList.add('error');
                setTimeout(() => webhookUrl.classList.remove('error'), 500);
                showNotification('Webhook URL is required.', 'error');
                return;
            }
            testBtn.disabled = true;
            showNotification('Testing webhook...', 'info');
            const url = btoa(webhookUrl.value);
            try {
                const response = await fetch(atob(url), {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content: 'Test message from Selfdox.cc Spammer' })
                });
                if (response.ok) {
                    showNotification('Webhook test successful.', 'success');
                } else {
                    throw new Error('Webhook test failed');
                }
            } catch (error) {
                showNotification('Webhook test failed. Check URL.', 'error');
                console.error(error);
            } finally {
                testBtn.disabled = false;
            }
        });
    </script>
</body>
</html>

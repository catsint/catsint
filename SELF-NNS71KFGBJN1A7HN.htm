<!doctype html>
<html lang="pl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Webhook Deleter — local</title>
<style>
  :root{--bg:#0b0b0d;--card:#111214;--accent:#8a4fe6;--danger:#d9534f;--muted:#999}
  body{font-family:Inter,ui-sans-serif,system-ui,Segoe UI,Roboto,"Helvetica Neue",Arial; background:linear-gradient(180deg,#050507, #0b0b0d); color:#eee; margin:0; min-height:100vh; display:flex; align-items:center; justify-content:center; padding:24px}
  .card{width:100%; max-width:820px; background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(0,0,0,0.02)); border:1px solid rgba(255,255,255,0.03); padding:20px; border-radius:12px; box-shadow:0 10px 30px rgba(0,0,0,0.6)}
  h1{margin:0 0 8px 0; font-size:20px}
  p.lead{margin:0 0 16px 0; color:var(--muted); font-size:13px}
  label{display:block; font-size:13px; margin:12px 0 6px}
  input[type=text], input[type=password], textarea{width:100%; padding:10px 12px; border-radius:8px; border:1px solid rgba(255,255,255,0.06); background:#060607; color:#fff; box-sizing:border-box}
  .row{display:flex; gap:8px; margin-top:12px}
  button{background:var(--accent); color:white; border:none; padding:10px 14px; border-radius:8px; cursor:pointer; font-weight:600}
  button.ghost{background:transparent; border:1px solid rgba(255,255,255,0.06)}
  button.danger{background:var(--danger)}
  .muted{color:var(--muted); font-size:13px}
  .log{background:#060607; border:1px dashed rgba(255,255,255,0.03); padding:10px; margin-top:12px; border-radius:8px; font-size:13px; max-height:220px; overflow:auto}
  .notice{background:#111214; padding:8px 10px; border-radius:8px; font-size:13px; color:var(--muted); margin-top:8px}
  small.warn{color: #f4b8b6}
</style>
</head>
<body>
  <div class="card" role="main">
    <h1>Webhook Deleter — lokalny (frontend-only)</h1>
    <p class="lead">Tool usuwa webhook, do którego masz dostęp. Zabezpieczenia: PIN, potwierdzenia i rate-limit po stronie przeglądarki. Jeśli serwis blokuje żądania z przeglądarki (CORS), użyj wyświetlonej komendy <code>curl</code> lokalnie.</p>

    <div class="notice">
      <strong>Uwaga:</strong> ten plik działa wyłącznie lokalnie w Twojej przeglądarce. Nie udostępniaj webhooków ani PINu nikomu. Nie używaj do usuwania cudzych zasobów.
    </div>

    <!-- PIN -->
    <label for="pin">PIN (wpisz PIN lub ustaw / zmień PIN lokalnie)</label>
    <div style="display:flex;gap:8px;">
      <input id="pin" placeholder="Wpisz PIN" type="password" autocomplete="new-password" />
      <button id="setPinBtn" class="ghost">Zapisz PIN lokalnie (zaszyfrowany)</button>
    </div>
    <div class="muted" style="margin-top:6px">Możesz też zamienić wartość `PIN_HASH` w skrypcie na SHA-256 Twojego PIN, by mieć stały PIN w pliku.</div>

    <!-- Webhook URL -->
    <label for="webhook">Webhook URL (pełny, np. Discord webhook URL)</label>
    <input id="webhook" type="text" placeholder="Wklej pełny URL webhooka" />

    <label for="confirmText">Potwierdzenie akcji (wpisz <code>DELETE</code> aby potwierdzić)</label>
    <input id="confirmText" type="text" placeholder="Wpisz DELETE aby potwierdzić" />

    <div class="row">
      <button id="testBtn">Wyślij testowe GET (sprawdź dostępność)</button>
      <button id="deleteBtn" class="danger">Usuń webhook (DELETE)</button>
      <button id="clearBtn" class="ghost">Wyczyść log</button>
    </div>

    <div style="display:flex; gap:8px; margin-top:12px; align-items:center;">
      <div class="muted">Rate-limit lokalny:</div>
      <div id="rateInfo" class="muted">0 akcji w ciągu 1 min</div>
    </div>

    <div class="log" id="log" aria-live="polite"></div>
    <div style="margin-top:12px; font-size:13px;"><strong>Jeśli wystąpi błąd CORS:</strong> narzędzie pokaże komendę <code>curl</code> którą możesz uruchomić lokalnie w terminalu by wykonać DELETE bez ograniczeń przeglądarki.</div>
    <div style="margin-top:12px"><small class="warn">Nie tworzę i nie wspieram nadużyć — korzystasz na własną odpowiedzialność.</small></div>
  </div>

<script>
/*
  Webhook Deleter — frontend-only
  - Możesz zapisać PIN lokalnie (hash jest wyliczany i zapisywany).
  - Alternatywnie: jeśli chcesz stały PIN w pliku, zastąp poniższy PIN_HASH wartością SHA-256 (heks) twojego PIN (komentarz w kodzie).
  - Uwaga: wiele endpointów blokuje CORS; wtedy zostanie wygenerowana komenda curl, którą uruchomisz lokalnie.
*/

/* ----- KONFIGURACJA: 
   Jeśli chcesz, możesz wstawić tu SHA-256 (hex) swojego PINu, np: 
   const PIN_HASH = "e3b0c44298fc1c149afbf4c8996fb924..."; 
   Wtedy użytkownik musi wpisać PIN zgodny z tym hashem.
   Jeśli pozostawisz null, używany będzie PIN zapisany w localStorage (jeśli ustawiony).
*/
const PIN_HASH = null; // <-- opcjonalnie zamień na hash SHA-256 (hex) dla stałego PINu w pliku

// Ogólne elementy
const logEl = document.getElementById('log');
const webhookInput = document.getElementById('webhook');
const pinInput = document.getElementById('pin');
const confirmInput = document.getElementById('confirmText');
const setPinBtn = document.getElementById('setPinBtn');
const testBtn = document.getElementById('testBtn');
const deleteBtn = document.getElementById('deleteBtn');
const clearBtn = document.getElementById('clearBtn');
const rateInfo = document.getElementById('rateInfo');

// Lokalny rate-limit (simple): maks akcje na minutę
const RATE_WINDOW_MS = 60_000;
const MAX_ACTIONS_PER_WINDOW = 4;
let actionTimestamps = [];

// Helper: log
function log(msg, level='info'){
  const el = document.createElement('div');
  el.textContent = `[${new Date().toLocaleTimeString()}] ${msg}`;
  if(level==='err') el.style.color = '#f77979';
  logEl.prepend(el);
}

// Helper: SHA-256, zwraca hex string
async function sha256Hex(str){
  const enc = new TextEncoder();
  const data = enc.encode(str);
  const hash = await crypto.subtle.digest('SHA-256', data);
  return Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2,'0')).join('');
}

// Pobierz aktualny hash PIN, preferuj stały PIN_HASH, w przeciwnym razie z localStorage
async function getStoredPinHash(){
  if(PIN_HASH) return PIN_HASH;
  return localStorage.getItem('webdel_pin_hash') || null;
}

// Ustaw PIN lokalnie (zapisz hash)
setPinBtn.addEventListener('click', async () => {
  const p = pinInput.value;
  if(!p){ alert('Wpisz PIN przed zapisaniem.'); return; }
  const h = await sha256Hex(p);
  localStorage.setItem('webdel_pin_hash', h);
  pinInput.value = '';
  log('PIN zapisany lokalnie (hash).');
});

// Prosty rate-limit check
function allowedAction(){
  const now = Date.now();
  // usuń stare
  actionTimestamps = actionTimestamps.filter(t => (now - t) <= RATE_WINDOW_MS);
  rateInfo.textContent = `${actionTimestamps.length} akcji w ciągu ${Math.round(RATE_WINDOW_MS/1000)} s (limit ${MAX_ACTIONS_PER_WINDOW})`;
  if(actionTimestamps.length >= MAX_ACTIONS_PER_WINDOW) return false;
  actionTimestamps.push(now);
  rateInfo.textContent = `${actionTimestamps.length} akcji w ciągu ${Math.round(RATE_WINDOW_MS/1000)} s (limit ${MAX_ACTIONS_PER_WINDOW})`;
  return true;
}

// Walidacja URL
function isValidUrl(u){
  try{
    const url = new URL(u);
    return ['http:', 'https:'].includes(url.protocol);
  }catch(e){
    return false;
  }
}

// Funkcja wykonująca fetch DELETE (z obsługą CORS)
async function attemptDelete(url){
  log('Próba wysłania żądania DELETE do: ' + url);
  try{
    const res = await fetch(url, { method: 'DELETE', mode: 'cors' });
    // Jeżeli serwis nie zezwala na CORS, fetch zwykle odrzuci promise lub zwróci opałny status
    if(res.ok){
      log('Usunięto webhook (odpowiedź OK).');
      return { ok: true, status: res.status, detail: 'Deleted (HTTP OK)' };
    } else {
      const txt = await res.text().catch(()=>'<no-body>');
      log(`Serwer zwrócił status ${res.status}. Treść: ${txt}`, 'err');
      return { ok: false, status: res.status, detail: txt };
    }
  }catch(err){
    log('Błąd podczas requestu: ' + (err && err.message ? err.message : String(err)), 'err');
    return { ok: false, error: err };
  }
}

// Generuj bezpieczną instrukcję curl, aby użytkownik mógł wykonać żądanie lokalnie (obejście CORS)
function curlCommandFor(url){
  // Używamy prostego DELETE. Jeśli endpoint wymaga nagłówków, daj użytkownikowi wskazówkę.
  return `curl -X DELETE "${url.replace(/"/g,'\\"')}"`;
}

// Test availability — GET (niektóre webhooky nie odpowiedzą na GET, ale próbujemy)
testBtn.addEventListener('click', async () => {
  if(!allowedAction()){ alert('Lokalny rate-limit osiągnięty — spróbuj później.'); return; }
  const url = webhookInput.value.trim();
  if(!isValidUrl(url)){ alert('Podaj poprawny URL.'); return; }
  log('Wysyłam testowe żądanie GET (sprawdzenie dostępności)...');
  try{
    const res = await fetch(url, { method: 'GET', mode: 'cors' });
    log(`GET: status ${res.status}.`);
  }catch(err){
    log('GET nie powiódł się (możliwe CORS lub brak odpowiedzi).', 'err');
    const curl = curlCommandFor(url);
    log('Uruchom w terminalu, jeśli chcesz przetestować poza przeglądarką: ' + curl);
  }
});

// DELETE button
deleteBtn.addEventListener('click', async () => {
  if(!allowedAction()){ alert('Lokalny rate-limit osiągnięty — spróbuj później.'); return; }

  const url = webhookInput.value.trim();
  const confirmText = confirmInput.value.trim();
  const pin = pinInput.value;

  if(!isValidUrl(url)){ alert('Podaj poprawny URL webhooka.'); return; }
  if(confirmText !== 'DELETE'){ alert('Aby potwierdzić, wpisz dokładnie DELETE w polu potwierdzenia.'); return; }

  const storedHash = await getStoredPinHash();
  if(!storedHash){ alert('Brak ustawionego PINu — najpierw zapisz PIN lokalnie (przycisk "Zapisz PIN lokalnie") albo ustaw PIN_HASH w pliku.'); return; }
  if(!pin){ alert('Wpisz PIN (pole PIN).'); return; }

  const pinHash = await sha256Hex(pin);
  if(pinHash !== storedHash){
    alert('Nieprawidłowy PIN.');
    log('Nieudana próba: nieprawidłowy PIN.', 'err');
    return;
  }

  // Ostateczne potwierdzenie modal-like
  if(!confirm('Potwierdzasz usunięcie webhooka? Akcja jest nieodwracalna dla tego tokena.')) return;

  // Wykonaj DELETE
  const result = await attemptDelete(url);

  if(result.ok){
    log('Webhook prawdopodobnie usunięty pomyślnie.');
    // oczyść pola potwierdzenia
    confirmInput.value = '';
    webhookInput.value = '';
    pinInput.value = '';
  } else {
    log('Usuwanie nie powiodło się; być może CORS lub serwis odrzucił request. Zobacz niżej instrukcję curl.', 'err');
    const curl = curlCommandFor(url);
    log('Jeśli to CORS — uruchom lokalnie w terminalu: ' + curl);
    // pokaż dodatkową wiadomość użytkownikowi
    alert('Usunięcie w przeglądarce nie powiodło się (możliwy problem CORS). Sprawdź log i użyj podanego curl, jeśli to konieczne.');
  }
});

// Clear log
clearBtn.addEventListener('click', ()=> logEl.innerHTML = '');

// Na starcie: załaduj ewentualny lokalny hash i pokaż info
(async function init(){
  const stored = await getStoredPinHash();
  if(stored){
    log('Znaleziono zapisany PIN (hash) — narzędzie gotowe.');
  } else {
    log('Brak zapisanego PINu. Ustaw PIN klikając "Zapisz PIN lokalnie" lub wklej hash do zmiennej PIN_HASH w pliku HTML.');
  }
  rateInfo.textContent = `${actionTimestamps.length} akcji w ciągu ${Math.round(RATE_WINDOW_MS/1000)} s (limit ${MAX_ACTIONS_PER_WINDOW})`;
})();
</script>
</body>
</html>
